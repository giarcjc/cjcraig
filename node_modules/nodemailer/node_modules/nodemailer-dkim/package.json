{
  "name": "nodemailer-dkim",
  "version": "1.0.3",
  "description": "Sign Nodemailer DKIM headers",
  "main": "src/nodemailer-dkim",
  "scripts": {
    "test": "grunt"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/andris9/nodemailer-dkim.git"
  },
  "keywords": [
    "DKIM",
    "Nodemailer"
  ],
  "author": {
    "name": "Andris Reinman"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/andris9/nodemailer-dkim/issues"
  },
  "homepage": "https://github.com/andris9/nodemailer-dkim",
  "dependencies": {
    "dkim-signer": "^0.2.0"
  },
  "devDependencies": {
    "chai": "~1.8.1",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.8.0",
    "grunt-mocha-test": "~0.10.0",
    "sinon": "^1.10.3"
  },
  "readme": "# DKIM Signer plugin for Nodemailer\n\nThis applies to Nodemailer v1.0+. Older versions have DKIM support built in.\n\n## Install\n\nInstall from npm\n\n    npm install nodemailer-dkim --save\n\n## Usage\n\nLoad the `signer` function\n\n```javascript\nvar signer = require('nodemailer-dkim').signer;\n```\n\nAttach it as a 'stream' handler for a nodemailer transport object\n\n```javascript\ntransporter.use('stream', signer(options))\n```\n\nWhere\n\n  * **options** is the DKIM options object\n      * **domainName** is the domain name that is being used for signing\n      * **keySelector** is the key selector (if you have set up a TXT record with DKIM public key at *zzz._domainkey.blurdybloop.com* then `zzz` is the selector)\n      * **privateKey** is the private key that is used for DKIM signing (string)\n      * **headerFieldNames** is an (optional) colon separated list of header fields to sign, by default all fields suggested by RFC4871 #5.5 are used\n\nAll messages transmitted through this transport objects are from now on DKIM signed.\n\n> **NB!** If several header fields with the same name exists, only the last one (the one in the bottom) is signed.\n\n## Example\n\n```javascript\nvar nodemailer = require('nodemailer');\nvar transporter = nodemailer.createTransport();\ntransporter.use('stream', require('nodemailer-dkim').signer({\n    domainName: 'kreata.ee',\n    keySelector: 'test',\n    privateKey: fs.readFileSync('private.pem')\n}));\ntransporter.sendMail({\n    from: 'sender@address',\n    to: 'receiver@address',\n    subject: 'hello',\n    text: 'hello world!'\n}, function(err, response) {\n    console.log(err || response);\n});\n```\n\n### Configration verification\n\nYou can use this module to check if your configuration is correct and the private key matches the public key listed in DNS\n\n```javascript\nvar verifyKeys = require('nodemailer-dkim').verifyKeys;\nverifyKeys(options, callback);\n```\n\nWhere\n\n  * **options** is the same option object you use for the `signer` function\n  * **callback** is the callback to run once verification is completed\n\n**Example**\n\n```javascript\nverifyKeys({\n    domainName: 'kreata.ee',\n    keySelector: 'test',\n    privateKey: fs.readFileSync('private.pem')\n}, function(err, success){\n    if(err){\n        console.log('Verification failed');\n        console.log(err);\n    }else if(success){\n        console.log('Verification successful, keys match');\n    }\n});\n```\n\n## License\n\n**MIT**\n\n\n\n",
  "readmeFilename": "README.md",
  "_id": "nodemailer-dkim@1.0.3",
  "dist": {
    "shasum": "d1cce07da4fc945fca3b7edadc49cda097e65bd8"
  },
  "_from": "nodemailer-dkim@^1.0.3",
  "_resolved": "https://registry.npmjs.org/nodemailer-dkim/-/nodemailer-dkim-1.0.3.tgz"
}
